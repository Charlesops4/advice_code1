#反爬方案

一、基础反反爬技术
1. 请求头模拟

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
    'Accept-Language': 'zh-CN,zh;q=0.9',
    'Referer': 'https://www.target.com/',
    'Accept-Encoding': 'gzip, deflate, br'
}

2. IP轮换方案
代理IP池：

proxies = {
    'http': 'http://user:pass@ip:port',
    'https': 'https://user:pass@ip:port'
}

# 使用随机代理
import random
proxy_list = [...]
current_proxy = {'https': random.choice(proxy_list)}


二、中级反反爬技术
3. 动态Cookie处理
session = requests.Session()
# 先获取必要的Cookie
login_res = session.post(login_url, data=credentials)
# 后续请求自动携带Cookie
data_res = session.get(data_url)

4. 请求参数逆向
# 分析JavaScript生成的参数
import execjs

with open('encrypt.js', 'r') as f:
    js_code = f.read()
    
ctx = execjs.compile(js_code)
token = ctx.call('getToken', 'param1')


三、高级反反爬技术
5. 浏览器自动化
from selenium.webdriver.chrome.options import Options

options = Options()
options.add_argument('--disable-blink-features=AutomationControlled')
driver = webdriver.Chrome(options=options)

# 修改webdriver属性
driver.execute_cdp_cmd(
    "Page.addScriptToEvaluateOnNewDocument", {
        "source": """
        Object.defineProperty(navigator, 'webdriver', {
            get: () => undefined
        })
        """
    }
)
6. WebSocket协议处理
import websockets
async def fetch_ws_data():
    async with websockets.connect('wss://target.com/ws') as ws:
        await ws.send('{"action":"subscribe"}')
        while True:
            data = await ws.recv()
            print(data)

四、特殊反爬应对方案
7. 验证码破解方案
# 使用OCR识别简单验证码
import pytesseract
from PIL import Image

def solve_captcha(image_path):
    image = Image.open(image_path)
    text = pytesseract.image_to_string(image)
    return text

# 第三方验证码服务
def use_captcha_service(image):
    import requests
    res = requests.post('https://2captcha.com/in.php', 
                      files={'file': image})
    return res.json()['request']

8. 指纹对抗技术
# 修改浏览器指纹
constraints = {
    "audio": False,
    "video": {
        "mandatory": {
            "chromeMediaSource": "tab",
            "maxWidth": 1280,
            "maxHeight": 720
        }
    }
}


五、分布式爬虫架构
9. 分布式爬取方案
# 使用Scrapy-Redis
# settings.py
SCHEDULER = "scrapy_redis.scheduler.Scheduler"
DUPEFILTER_CLASS = "scrapy_redis.dupefilter.RFPDupeFilter"
REDIS_URL = 'redis://user:pass@ip:port'

10. 请求频率控制
from time import sleep
import random

def random_delay():
    delay = random.uniform(1, 3)
    sleep(delay)


六、移动端反爬应对
11. 模拟移动端环境
mobile_emulation = {
    "deviceMetrics": { "width": 375, "height": 812, "pixelRatio": 3.0 },
    "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X)"
}
options.add_experimental_option("mobileEmulation", mobile_emulation)


七、智能对抗方案
12. 机器学习辅助
# 使用CNN识别验证码
import tensorflow as tf

model = tf.keras.models.load_model('captcha_model.h5')
def predict_captcha(image):
    img_array = preprocess_image(image)
    predictions = model.predict(img_array)
    return decode_predictions(predictions)
